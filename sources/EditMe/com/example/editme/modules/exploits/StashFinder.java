package com.example.editme.modules.exploits;

import com.example.editme.events.EntityPlayerTravel;
import com.example.editme.modules.Module;
import com.example.editme.settings.Setting;
import com.example.editme.util.client.Timer;
import com.example.editme.util.module.ModuleManager;
import com.example.editme.util.setting.SettingsManager;
import com.mojang.realmsclient.gui.ChatFormatting;
import java.awt.AWTException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.init.Items;
import net.minecraft.inventory.EntityEquipmentSlot;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketEntityAction.Action;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityChest;
import net.minecraft.tileentity.TileEntityShulkerBox;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.ChunkPos;
import net.minecraft.util.math.MathHelper;

@Module.Info(
   name = "StashFinder",
   category = Module.Category.EXPLOITS
)
public class StashFinder extends Module {
   private BlockPos startingPos;
   private int totalPathLength;
   private Map stashMap;
   private final HashMap stashes;
   private BlockPos prevPos;
   private Setting shiftDirection;
   private Setting densityMapping;
   private boolean inverted;
   private Setting searchPathLineLength;
   @EventHandler
   private Listener OnTravel;
   private Setting logToFile;
   private boolean shifting;
   private int currentSearchPathLength;
   private Setting searchDirection;
   private int totalShiftLength;
   private Setting shiftLength;
   private int currentShiftPathLength;
   private ArrayList chestPositions;
   private Timer InstantFlyTimer;
   private int neededYaw;
   private Setting minStashDensity;
   public static StashFinder INSTANCE;
   private Setting instantFly;
   private Setting speed;
   private BlockPos currentPos;

   public void onUpdate() {
      Iterator var1 = mc.field_71441_e.field_147482_g.iterator();

      while(true) {
         TileEntity var2;
         BlockPos var3;
         do {
            if (!var1.hasNext()) {
               return;
            }

            var2 = (TileEntity)var1.next();
            var3 = var2.func_174877_v();
         } while(!(var2 instanceof TileEntityChest) && !(var2 instanceof TileEntityShulkerBox));

         boolean var4 = false;
         Iterator var5 = this.chestPositions.iterator();

         while(var5.hasNext()) {
            Object var6 = var5.next();
            BlockPos var7 = (BlockPos)var6;
            if (var7.equals(var3)) {
               var4 = true;
               break;
            }
         }

         if (!var4) {
            this.chestPositions.add(var3);
            int var16 = var3.func_177958_n() / 16;
            int var17 = var3.func_177952_p() / 16;
            long var18 = ChunkPos.func_77272_a(var16, var17);
            if (!this.stashMap.containsKey(var18)) {
               this.stashMap.put(var18, 0);
            }

            int var9 = (Integer)this.minStashDensity.getValue();
            int var10 = (Integer)this.stashMap.get(var18) + 1;
            if (var2 instanceof TileEntityShulkerBox && var10 < var9) {
               var10 = var9;
            }

            this.stashMap.put(var18, var10);
            if (var10 == var9) {
               this.sendNotification(var3.toString());
            }

            if ((Boolean)this.logToFile.getValue()) {
               try {
                  BufferedWriter var11 = new BufferedWriter(new FileWriter("StashFinder", true));
                  String var12 = "";
                  Calendar var13 = Calendar.getInstance();
                  SimpleDateFormat var14 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                  var12 = String.valueOf((new StringBuilder()).append(var12).append("[").append(var14.format(var13.getTime())).append("|"));
                  if (mc.func_147104_D() != null) {
                     var12 = String.valueOf((new StringBuilder()).append(var12).append(mc.func_147104_D().field_78845_b).append("|"));
                  }

                  switch(mc.field_71439_g.field_71093_bK) {
                  case -1:
                     var12 = String.valueOf((new StringBuilder()).append(var12).append("Nether"));
                     break;
                  case 0:
                     var12 = String.valueOf((new StringBuilder()).append(var12).append("Overworld"));
                     break;
                  case 1:
                     var12 = String.valueOf((new StringBuilder()).append(var12).append("End"));
                  }

                  var12 = String.valueOf((new StringBuilder()).append(var12).append("] "));
                  var12 = String.valueOf((new StringBuilder()).append(var12).append(var3.toString()).append(" "));
                  if (var2 instanceof TileEntityShulkerBox) {
                     var12 = String.valueOf((new StringBuilder()).append(var12).append("Shulker"));
                  }

                  var11.write(var12);
                  var11.newLine();
                  var11.close();
               } catch (IOException var15) {
                  var15.printStackTrace();
               }
            }
         }
      }
   }

   private void lambda$new$0(EntityPlayerTravel var1) {
      if (mc.field_71439_g != null) {
         if (this.startingPos != null) {
            if (this.prevPos == null) {
               this.prevPos = this.startingPos;
            }

            this.currentPos = mc.field_71439_g.func_180425_c();
            if (this.shifting) {
               if (this.shiftDirection.getValue() == StashFinder.Direction.POSX) {
                  this.currentShiftPathLength += this.currentPos.func_177958_n() - this.prevPos.func_177958_n();
                  this.neededYaw = -90;
               }

               if (this.shiftDirection.getValue() == StashFinder.Direction.POSZ) {
                  this.currentShiftPathLength += this.currentPos.func_177952_p() - this.prevPos.func_177952_p();
                  this.neededYaw = 0;
               }

               if (this.shiftDirection.getValue() == StashFinder.Direction.NEGX) {
                  this.currentShiftPathLength += this.prevPos.func_177958_n() - this.currentPos.func_177958_n();
                  this.neededYaw = 90;
               }

               if (this.shiftDirection.getValue() == StashFinder.Direction.NEGZ) {
                  this.currentShiftPathLength += this.prevPos.func_177952_p() - this.currentPos.func_177952_p();
                  this.neededYaw = 180;
               }

               if (this.currentShiftPathLength > (Integer)this.shiftLength.getValue()) {
                  this.shifting = false;
                  if (this.inverted) {
                     this.inverted = false;
                  } else {
                     this.inverted = true;
                  }

                  this.currentShiftPathLength = 0;
                  this.shifting = false;
               }
            } else {
               if (!this.inverted) {
                  if (this.searchDirection.getValue() == StashFinder.Direction.POSX) {
                     this.currentSearchPathLength += this.currentPos.func_177958_n() - this.prevPos.func_177958_n();
                     this.neededYaw = -90;
                  }

                  if (this.searchDirection.getValue() == StashFinder.Direction.POSZ) {
                     this.currentSearchPathLength += this.currentPos.func_177952_p() - this.prevPos.func_177952_p();
                     this.neededYaw = 180;
                  }

                  if (this.searchDirection.getValue() == StashFinder.Direction.NEGX) {
                     this.currentSearchPathLength += this.prevPos.func_177958_n() - this.currentPos.func_177958_n();
                     this.neededYaw = 90;
                  }

                  if (this.searchDirection.getValue() == StashFinder.Direction.NEGZ) {
                     this.currentSearchPathLength += this.prevPos.func_177952_p() - this.currentPos.func_177952_p();
                     this.neededYaw = 0;
                  }
               } else {
                  if (this.searchDirection.getValue() == StashFinder.Direction.POSX) {
                     this.currentSearchPathLength += this.prevPos.func_177958_n() - this.currentPos.func_177958_n();
                     this.neededYaw = 90;
                  }

                  if (this.searchDirection.getValue() == StashFinder.Direction.POSZ) {
                     this.currentSearchPathLength += this.prevPos.func_177952_p() - this.currentPos.func_177952_p();
                     this.neededYaw = 0;
                  }

                  if (this.searchDirection.getValue() == StashFinder.Direction.NEGX) {
                     this.currentSearchPathLength += this.currentPos.func_177958_n() - this.prevPos.func_177958_n();
                     this.neededYaw = -90;
                  }

                  if (this.searchDirection.getValue() == StashFinder.Direction.NEGZ) {
                     this.currentSearchPathLength += this.currentPos.func_177952_p() - this.prevPos.func_177952_p();
                     this.neededYaw = 180;
                  }
               }

               if (this.currentSearchPathLength > (Integer)this.searchPathLineLength.getValue()) {
                  this.shifting = true;
                  this.currentSearchPathLength = 0;
               }
            }

            this.prevPos = this.currentPos;
            if (mc.field_71439_g.func_184582_a(EntityEquipmentSlot.CHEST).func_77973_b() == Items.field_185160_cR) {
               mc.field_71439_g.field_70177_z = (float)this.neededYaw;
               if (!mc.field_71439_g.func_184613_cA()) {
                  if (!mc.field_71439_g.field_70122_E && (Boolean)this.instantFly.getValue()) {
                     if (!this.InstantFlyTimer.passed(1000.0D)) {
                        return;
                     }

                     this.InstantFlyTimer.reset();
                     mc.field_71439_g.field_71174_a.func_147297_a(new CPacketEntityAction(mc.field_71439_g, Action.START_FALL_FLYING));
                  }

               } else {
                  this.handleElytra(var1);
               }
            }
         }
      }
   }

   private void handleElytra(EntityPlayerTravel var1) {
      var1.cancel();
      float var2 = (float)Math.toRadians((double)mc.field_71439_g.field_70177_z);
      mc.field_71439_g.field_70159_w = (double)(-MathHelper.func_76126_a(var2)) * (double)(Float)this.speed.getValue();
      mc.field_71439_g.field_70181_x = -0.0D;
      mc.field_71439_g.field_70179_y = (double)MathHelper.func_76134_b(var2) * (double)(Float)this.speed.getValue();
   }

   public void onDisable() {
      this.totalPathLength = 0;
      this.totalShiftLength = 0;
      this.currentSearchPathLength = 0;
      this.currentShiftPathLength = 0;
      ModuleManager.enableModule("ElytraFly");
   }

   public StashFinder() throws AWTException {
      this.searchDirection = this.register(SettingsManager.e("Search Direction", StashFinder.Direction.POSX));
      this.shiftDirection = this.register(SettingsManager.e("Shift Direction", StashFinder.Direction.POSZ));
      this.searchPathLineLength = this.register(SettingsManager.i("Search Path Length", 10000));
      this.shiftLength = this.register(SettingsManager.i("Search Length", 200));
      this.minStashDensity = this.register(SettingsManager.i("Stash Storage Density Min", 10));
      this.logToFile = this.register(SettingsManager.b("Save to File", false));
      this.densityMapping = this.register(SettingsManager.b("OldChunk/Block Density Mapping [BETA]", false));
      this.instantFly = this.register(SettingsManager.b("InstantFly", true));
      this.speed = this.register(SettingsManager.f("Speed", 2.8F));
      this.chestPositions = new ArrayList();
      this.stashMap = new HashMap();
      this.stashes = new HashMap();
      this.InstantFlyTimer = new Timer();
      this.OnTravel = new Listener(this::lambda$new$0, new Predicate[0]);
      INSTANCE = this;
   }

   public void onEnable() {
      if (mc.field_71439_g != null) {
         this.totalPathLength = 0;
         this.totalShiftLength = 0;
         this.currentSearchPathLength = 0;
         this.currentShiftPathLength = 0;
         this.shifting = false;
         this.inverted = false;
         this.sendNotification(String.valueOf((new StringBuilder()).append(ChatFormatting.RED.toString()).append("Make sure you are at your desired Y level before starting")));
         if (ModuleManager.isModuleEnabled("ElytraFly")) {
            this.sendNotification("Setting up Stash Finder");
            this.chestPositions.clear();
            this.stashMap.clear();
            if ((Boolean)this.densityMapping.getValue()) {
               this.sendNotification("Initializing density map");
            }

            this.sendNotification("Starting autopilot");
            ModuleManager.disableModule("ElytraFly");
            this.startingPos = mc.field_71439_g.func_180425_c();
            if (this.searchDirection.getValue() == StashFinder.Direction.POSX) {
               this.neededYaw = -90;
               this.sendNotification("Searching POSX...");
            }

            if (this.searchDirection.getValue() == StashFinder.Direction.POSZ) {
               this.neededYaw = 180;
               this.sendNotification("Searching POSZ...");
            }

            if (this.searchDirection.getValue() == StashFinder.Direction.NEGX) {
               this.neededYaw = 90;
               this.sendNotification("Searching NEGX...");
            }

            if (this.searchDirection.getValue() == StashFinder.Direction.NEGZ) {
               this.neededYaw = 0;
               this.sendNotification("Searching NEGZ...");
            }

            this.inverted = false;
         } else {
            this.sendNotification(String.valueOf((new StringBuilder()).append(ChatFormatting.RED.toString()).append("Please turn on ElytraFly first and get into a stable aerial position")));
            this.disable();
         }

      }
   }

   private static enum Direction {
      NEGZ,
      POSX,
      NEGX;

      private static final StashFinder.Direction[] $VALUES = new StashFinder.Direction[]{POSX, NEGX, POSZ, NEGZ};
      POSZ;
   }
}
