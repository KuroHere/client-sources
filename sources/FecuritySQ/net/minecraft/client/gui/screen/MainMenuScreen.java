package net.minecraft.client.gui.screen;

import com.google.common.util.concurrent.Runnables;
import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.platform.GlStateManager;
import com.mojang.blaze3d.systems.RenderSystem;

import java.awt.*;
import java.io.IOException;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.function.BiConsumer;
import javax.annotation.Nullable;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.DialogTexts;
import net.minecraft.client.gui.widget.Widget;
import net.minecraft.client.gui.widget.button.Button;
import net.minecraft.client.gui.widget.button.ImageButton;
import net.minecraft.client.renderer.RenderSkybox;
import net.minecraft.client.renderer.RenderSkyboxCube;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.resources.I18n;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SharedConstants;
import net.minecraft.util.Util;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.registry.DynamicRegistries;
import net.minecraft.util.text.TranslationTextComponent;
import net.minecraft.world.gen.settings.DimensionGeneratorSettings;
import net.minecraft.world.storage.SaveFormat;
import net.minecraft.world.storage.WorldSummary;
import net.optifine.reflect.Reflector;
import net.optifine.reflect.ReflectorForge;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ru.FecuritySQ.font.Fonts;
import ru.FecuritySQ.screens.AltButton;
import ru.FecuritySQ.screens.AltManagerScreen;
import ru.FecuritySQ.shader.GaussianBlur;
import ru.FecuritySQ.shader.ShaderUtil;
import ru.FecuritySQ.utils.RenderUtil;

public class MainMenuScreen extends Screen {
    private static final Logger field_238656_b_ = LogManager.getLogger();
    public static final RenderSkyboxCube PANORAMA_RESOURCES = new RenderSkyboxCube(new ResourceLocation("textures/gui/title/background/panorama"));
    private static final ResourceLocation PANORAMA_OVERLAY_TEXTURES = new ResourceLocation("textures/gui/title/background/panorama_overlay.png");
    private static final ResourceLocation ACCESSIBILITY_TEXTURES = new ResourceLocation("textures/gui/accessibility.png");
    private final boolean showTitleWronglySpelled;
    @Nullable
    private String splashText;
    private Button buttonResetDemo;
    private static final ResourceLocation MINECRAFT_TITLE_TEXTURES = new ResourceLocation("textures/gui/title/minecraft.png");
    private static final ResourceLocation MINECRAFT_TITLE_EDITION = new ResourceLocation("textures/gui/title/edition.png");

    /**
     * Has the check for a realms notification screen been performed?
     */
    private boolean hasCheckedForRealmsNotification;
    public static long initTime;

    /**
     * A screen generated by realms for notifications; drawn in adition to the main menu (buttons and such from both are
     * drawn at the same time). May be null.
     */
    private Screen realmsNotification;
    private int widthCopyright;
    private int widthCopyrightRest;
    private final RenderSkybox panorama = new RenderSkybox(PANORAMA_RESOURCES);
    private final boolean showFadeInAnimation;
    private long firstRenderTime;
    private Screen modUpdateNotification;

    public MainMenuScreen() {
        this(false);
    }

    public MainMenuScreen(boolean fadeIn) {
        super(new TranslationTextComponent("narrator.screen.title"));
        this.showFadeInAnimation = true;
        this.showTitleWronglySpelled = (double) (new Random()).nextFloat() < 1.0E-4D;
        initTime = System.currentTimeMillis();

    }

    public boolean isPauseScreen() {
        return false;
    }

    public boolean shouldCloseOnEsc() {
        return false;
    }

    protected void init() {
        this.widthCopyrightRest = this.width - this.widthCopyright - 2;
        int i = 24;
        int j = this.height / 4 + 48;

        Button button = null;
        boolean flag = this.minecraft.isMultiplayerEnabled();
        Button.ITooltip button$itooltip = flag ? Button.field_238486_s_ : (p_lambda$addSingleplayerMultiplayerButtons$5_1_, p_lambda$addSingleplayerMultiplayerButtons$5_2_, p_lambda$addSingleplayerMultiplayerButtons$5_3_, p_lambda$addSingleplayerMultiplayerButtons$5_4_) ->
        {
            if (!p_lambda$addSingleplayerMultiplayerButtons$5_1_.active) {
                this.renderTooltip(p_lambda$addSingleplayerMultiplayerButtons$5_2_, this.minecraft.fontRenderer.trimStringToWidth(new TranslationTextComponent("title.multiplayer.disabled"), Math.max(this.width / 2 - 43, 170)), p_lambda$addSingleplayerMultiplayerButtons$5_3_, p_lambda$addSingleplayerMultiplayerButtons$5_4_);
            }
        };
        this.addButton(new AltButton(this.width / 2 - 100, j + 24 * 1, 98, 15, new TranslationTextComponent("Выбор сервера"), (p_lambda$addSingleplayerMultiplayerButtons$6_1_) ->
        {
            Screen screen = (Screen) (this.minecraft.gameSettings.skipMultiplayerWarning ? new MultiplayerScreen(this) : new MultiplayerWarningScreen(this));
            this.minecraft.displayGuiScreen(screen);
        }));

        this.addButton(new AltButton(this.width / 2 - 100, j + 72 + 12, 98, 15, new TranslationTextComponent("Поменять аккаунт"), (p_lambda$init$1_1_) ->
        {
            this.minecraft.displayGuiScreen(new AltManagerScreen(this));
        }));

        this.addButton(new AltButton(this.width / 2 - 100, j + 72 + 12, 98, 15, new TranslationTextComponent("Настройки"), (p_lambda$init$1_1_) ->
        {
            this.minecraft.displayGuiScreen(new OptionsScreen(this, this.minecraft.gameSettings));
        }));
        this.addButton(new AltButton(this.width / 2 + 2, j + 72 + 12, 98, 15, new TranslationTextComponent("Выход"), (p_lambda$init$2_1_) ->
        {
            this.minecraft.shutdown();
        }));
    }
    public ShaderUtil shaderUtil = new ShaderUtil("background");

    public void render(MatrixStack matrixStack, int mouseX, int mouseY, float partialTicks) {
        if (this.firstRenderTime == 0L && this.showFadeInAnimation) {
            this.firstRenderTime = Util.milliTime();
        }
        float f = this.showFadeInAnimation ? (float) (Util.milliTime() - this.firstRenderTime) / 1000.0F : 1.0F;
        GlStateManager.disableDepthTest();
        this.panorama.render(partialTicks, MathHelper.clamp(f, 0.0F, 1.0F));


        this.minecraft.getTextureManager().bindTexture(PANORAMA_OVERLAY_TEXTURES);

        shaderUtil.init();
        shaderUtil.setUniformf("resolution", minecraft.getMainWindow().getScaledWidth(), minecraft.getMainWindow().getScaledHeight());
        shaderUtil.setUniformf("time", (System.currentTimeMillis() - initTime) / 1000f);
        shaderUtil.drawQuads();
        shaderUtil.unload();

        int x =  minecraft.getMainWindow().getScaledWidth();
        int y =  minecraft.getMainWindow().getScaledHeight();

        RenderSystem.enableBlend();
        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
        GaussianBlur.renderBlur(20);

        RenderUtil.drawRound(0,0, x, y, 0, new Color(0,0,0, 150).getRGB());
        for (Widget widget : this.buttons) {
            widget.setAlpha(1);
        }

        Fonts.mntsb40.drawCenteredStringWithOutline(matrixStack, "FecuritySQ", x / 2, y / 3, -1);
        Fonts.mntsb16.drawString(matrixStack, "1.16.5", x / 2 + 22, y / 3 + 8, -1);
        Fonts.mntsb16.drawString(matrixStack, "Создатель: Sqewer", x / 2 - 40, y  / 1.5f, -1);
        int offset = 0;
        for(Widget w : this.buttons){
            w.x = x / 2 - w.getWidth() / 2;
            w.y = y / 3 + 40 + offset;
            offset+=w.getHeightRealms() + 5;
        }

        super.render(matrixStack, mouseX, mouseY, partialTicks);
    }


    public boolean mouseClicked(double mouseX, double mouseY, int button) {
        return super.mouseClicked(mouseX, mouseY, button);
    }
}

