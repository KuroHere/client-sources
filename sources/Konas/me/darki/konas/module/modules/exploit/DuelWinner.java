package me.darki.konas.module.modules.exploit;

import cookiedragon.eventsystem.Subscriber;
import me.darki.konas.event.events.LoadGuiEvent;
import me.darki.konas.event.events.PacketEvent;
import me.darki.konas.event.events.UpdateEvent;
import me.darki.konas.module.Module;
import me.darki.konas.setting.Setting;
import me.darki.konas.util.timer.Timer;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiGameOver;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.client.multiplayer.ServerData;
import net.minecraft.client.multiplayer.WorldClient;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.network.play.server.SPacketChat;
import net.minecraft.network.play.server.SPacketTitle;
import net.minecraftforge.fml.common.gameevent.TickEvent;

import java.util.concurrent.atomic.AtomicBoolean;

public class DuelWinner extends Module {
    private static Setting<Boolean> relog = new Setting<>("Relog", true);

    public DuelWinner() {
        super("DuelWinner", "Automatically win duels which you requested", Category.EXPLOIT);
    }

    private Timer killTimer = new Timer();

    public void onEnable() {
        disconnect.set(false);
    }

    private AtomicBoolean disconnect = new AtomicBoolean(false);

    @Subscriber
    public void onUpdate(UpdateEvent event) {
        if (mc.player == null || mc.world == null || mc.currentScreen instanceof GuiDownloadTerrain) return;

        if (event.getPhase() == TickEvent.Phase.START && disconnect.get()) {
            disconnect.set(false);

            String serverIP = "";

            if (relog.getValue() && mc.getCurrentServerData() != null && mc.getCurrentServerData().serverIP != null) {
                serverIP = mc.getCurrentServerData().serverIP;
            }

            if (mc.world != null) {
                mc.world.sendQuittingDisconnectingPacket();
            }

            killTimer.setTime(0);

            if (relog.getValue() && serverIP != null) {
                mc.displayGuiScreen(new GuiConnecting(null, mc, new ServerData("Congratulations on your victory!", serverIP, false)));
            } else {
                mc.loadWorld((WorldClient) null);
                mc.displayGuiScreen(new GuiMainMenu());
            }
        }
    }

    @Subscriber
    public void onPacketReceive(PacketEvent.Receive event) {
        if (mc.world == null || mc.player == null || mc.currentScreen instanceof GuiDownloadTerrain) return;

        if (event.getPacket() instanceof SPacketChat) {
            if (((SPacketChat) event.getPacket()).getChatComponent() != null && ((SPacketChat) event.getPacket()).getChatComponent().getUnformattedText() != null) {
                if (((SPacketChat) event.getPacket()).getChatComponent().getUnformattedText().toLowerCase().contains(mc.player.getName().toLowerCase()) && ((SPacketChat) event.getPacket()).getChatComponent().getUnformattedText().toLowerCase().contains("suicide")) {
                    event.setCancelled(true);
                } else if (((SPacketChat) event.getPacket()).getChatComponent().getUnformattedText().toLowerCase().contains("duel request sent to")) {
                    mc.player.connection.sendPacket(new CPacketChatMessage("/kill"));
                    killTimer.reset();
                }
            }
        } else if (event.getPacket() instanceof SPacketTitle) {
            if (((SPacketTitle) event.getPacket()).getMessage() != null && ((SPacketTitle) event.getPacket()).getMessage().getUnformattedText() != null) {
                if (((SPacketTitle) event.getPacket()).getMessage().getUnformattedText().equals("GO!")) {
                    disconnect.set(true);
                }
            }
        }
    }

    @Subscriber
    public void onLoadGuiScreen(LoadGuiEvent event) {
        if (event.getGui() instanceof GuiGameOver && !killTimer.hasPassed(30000)) {
            event.setCancelled(true);
        }
    }
}
