package me.darki.konas.util.combat;

import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockObsidian;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;

import java.util.ArrayList;

public class VulnerabilityUtil {
    public static Minecraft mc = Minecraft.getMinecraft();

    public static boolean isVulnerable(Entity entity) {
        BlockPos root = new BlockPos(entity);
        return !getVulnerablePositions(root).isEmpty();
    }

    public static ArrayList<BlockPos> getVulnerablePositions(BlockPos root) {
        ArrayList<BlockPos> vP = new ArrayList<>();
        if (!(mc.world.getBlockState(root).getBlock() instanceof BlockAir)) {
            return vP;
        }
        for (EnumFacing facing : EnumFacing.HORIZONTALS) {
            if (mc.world.getBlockState(root.offset(facing)).getBlock() instanceof BlockAir) return new ArrayList<BlockPos>();
            if (!(mc.world.getBlockState(root.offset(facing)).getBlock() instanceof BlockObsidian)) continue;
            if (CrystalUtils.canPlaceCrystal(root.offset(facing, 2).down()) && mc.world.getBlockState(root.offset(facing)).getBlock() != Blocks.AIR) {
                vP.add(root.offset(facing));
            } else if (CrystalUtils.canPlaceCrystal(root.offset(facing)) && mc.world.getBlockState(root.offset(facing)).getBlock() != Blocks.AIR && (
                    mc.world.getBlockState(root.offset(facing).down()).getBlock() == Blocks.BEDROCK || mc.world.getBlockState(root.offset(facing).down()).getBlock() == Blocks.OBSIDIAN
                    )) {
                vP.add(root.offset(facing));
            }
        }
        return vP;
    }
}
