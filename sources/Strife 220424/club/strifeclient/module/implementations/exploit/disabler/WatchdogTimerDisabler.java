package club.strifeclient.module.implementations.exploit.disabler;

import best.azura.eventbus.handler.EventHandler;
import best.azura.eventbus.handler.Listener;
import club.strifeclient.event.implementations.networking.PacketInboundEvent;
import club.strifeclient.event.implementations.networking.PacketOutboundEvent;
import club.strifeclient.event.implementations.player.MotionEvent;
import club.strifeclient.module.implementations.exploit.Disabler;
import club.strifeclient.setting.Mode;
import club.strifeclient.util.math.MathUtil;
import club.strifeclient.util.networking.PacketUtil;
import club.strifeclient.util.player.ChatUtil;
import club.strifeclient.util.system.Stopwatch;
import net.minecraft.client.Minecraft;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.status.INetHandlerStatusClient;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.IChatComponent;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayDeque;
import java.util.Deque;

public class WatchdogTimerDisabler extends Mode<Disabler.DisablerMode> {

    private final Deque<Packet<?>> packetQueue = new ArrayDeque<>();
    private final Stopwatch burstStopwatch = new Stopwatch();
    private final Stopwatch pingStopwatch = new Stopwatch();

    private boolean disabled, doneSpoofing;
    private long clientTime, currentLatency;

    private S08PacketPlayerPosLook lastTick;

    @Override
    public void onDisable() {
        super.onDisable();
        doneSpoofing = disabled = false;
//        networkManager.closeChannel();
    }

    @Override
    public void onEnable() {
        super.onEnable();
//        new Thread(() -> {
//            try {
//                networkManager = NetworkManager.createNetworkManagerAndConnect(
//                        InetAddress.getByName(mc.getCurrentServerData().serverIP), 25565, false);
//                networkManager.setNetHandler(pingStatus);
//            } catch (UnknownHostException e) {
//                e.printStackTrace();
//            }
//        }).start();
    }

    @EventHandler
    private final Listener<PacketInboundEvent> packetInboundEventListener = e -> {
        if (mc.getNetHandler().doneLoadingTerrain && mc.thePlayer.ticksExisted < 20 && disabled && doneSpoofing) {
            this.burstStopwatch.reset();
            this.packetQueue.clear();
            disabled = doneSpoofing = false;
            ChatUtil.sendMessage("reset");
        }
        if (e.packet instanceof S08PacketPlayerPosLook) {
            final S08PacketPlayerPosLook clientBoundPosition = e.getPacket();
            if (!disabled) {
                lastTick = clientBoundPosition;
                disabled = true;
                e.setCancelled(true);
            } else {
                if (lastTick != null) {
                    e.packet = lastTick;
                    lastTick = null;
                }
            }
        }
    };

    @EventHandler
    private final Listener<PacketOutboundEvent> packetOutboundEventListener = e -> {
        if (mc.getNetHandler().doneLoadingTerrain) {
            if (doneSpoofing) {
                if (e.packet instanceof C0FPacketConfirmTransaction || e.packet instanceof C00PacketKeepAlive) {
                    packetQueue.add(e.packet);
                    e.setCancelled(true);
                }
            } else {
                if (e.packet instanceof C03PacketPlayer) {
                    if (mc.thePlayer.ticksExisted <= 120)
                        e.setCancelled(true);
                    else {
                        ChatUtil.sendMessage("Finished spoofing.");
                        doneSpoofing = true;
                    }
                }
            }
        }
    };

    @EventHandler
    private final Listener<MotionEvent> motionEventListener = e -> {

        // Force an S08 from the server (repeat y + 1 until flag)
        if (!disabled) {
            e.y += 1;
        } else {
            if (burstStopwatch.hasElapsed(Math.max(0, MathUtil.randomInt(550, 650) - currentLatency))) {
//                networkManager.sendPacket(new C01PacketPing(clientTime = System.currentTimeMillis()));
                while (!packetQueue.isEmpty()) {
                    PacketUtil.sendPacketNoEvent(packetQueue.poll());
                }
                ChatUtil.sendMessage("burst");
                burstStopwatch.reset();
            }
        }
    };

    @Override
    public Disabler.DisablerMode getRepresentation() {
        return Disabler.DisablerMode.WATCHDOG_TIMER;
    }

}
